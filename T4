CHIP HalfAdder {
    IN x, y;
    OUT sum,
        carry;

    PARTS:
    And(a=x, b=y, out=carry);
    Xor(a=x, b=y, out=sum);
}

CHIP FullAdder {
    IN x,y, c;
    OUT sum,     
        carry; 

    PARTS:
    Xor(a=x, b=y, out=s1);
    And(a=x, b=y, out=a1);
    Xor(a=s1, b=c, out=sum);
    And(a=s1, b=c, out=a2);
    Or(a=a1, b=a2, out=carry);
}

CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
    FullAdder(a=a[0], b=b[0], c=false, sum=out[0], carry=c1);
    FullAdder(a=a[1], b=b[1], c=c1, sum=out[1], carry=c2);
    FullAdder(a=a[2], b=b[2], c=c2, sum=out[2], carry=c3);
    FullAdder(a=a[3], b=b[3], c=c3, sum=out[3], carry=c4);
    FullAdder(a=a[4], b=b[4], c=c4, sum=out[4], carry=c5);
    FullAdder(a=a[5], b=b[5], c=c5, sum=out[5], carry=c6);
    FullAdder(a=a[6], b=b[6], c=c6, sum=out[6], carry=c7);
    FullAdder(a=a[7], b=b[7], c=c7, sum=out[7], carry=c8);
    FullAdder(a=a[8], b=b[8], c=c8, sum=out[8], carry=c9);
    FullAdder(a=a[9], b=b[9], c=c9, sum=out[9], carry=c10);
    FullAdder(a=a[10], b=b[10], c=c10, sum=out[10], carry=c11);
    FullAdder(a=a[11], b=b[11], c=c11, sum=out[11], carry=c12);
    FullAdder(a=a[12], b=b[12], c=c12, sum=out[12], carry=c13);
    FullAdder(a=a[13], b=b[13], c=c13, sum=out[13], carry=c14);
    FullAdder(a=a[14], b=b[14], c=c14, sum=out[14], carry=c15);
    FullAdder(a=a[15], b=b[15], c=c15, sum=out[15], carry=c16);
}

CHIP Inc16 {
    IN in[16];
    OUT out[16];

    PARTS:
    Add16(a=in, b[0]=true, out=out);
}

CHIP ALU {
    IN  
        x[16], y[16],  
        zx,
        nx,
        zy,
        ny,
        f, 
        no;
    OUT 
        out[16], 
        zr,     
        ng;     

    PARTS:
    Not16(in=x, out=notx);
    Mux4Way16(a=x, b=notx, c[0..15]=false, d[0..15]=true, sel[1]=zx, sel[0]=nx, out=a);
    Not16(in=y, out=noty);
    Mux4Way16(a=y, b=noty, c[0..15]=false, d[0..15]=true, sel[1]=zy, sel[0]=ny, out=b);
    And16(a=a, b=b, out=aANDb);
    Add16(a=a, b=b, out=aADDb);
    Mux16(a=aANDb, b=aADDb, sel=f, out=o);
    Not16(in=o, out=noto);
    Mux16(a=o, b=noto, sel=no, out=out, out[15]=ng, out[0..7]=out8LSB, out[8..15]=out8MSB);
    Or8Way(in=out8LSB, out=or8LSB);
    Or8Way(in=out8MSB, out=or8MSB);
    Or(a=or8LSB, b=or8MSB, out=or16Out);
    Not(in=or16Out, out=zr);
}
